/**
 * This code generates a shipping label in PDF format using the PDFKit library.
 * It includes functions to split long addresses into multiple lines and draw a barcode image.
 * The `pdfKit` function generates a shipping label with a single address.
 * The `generateShippingLabelA6` function generates a shipping label with a sender and receiver address, a barcode, and a table of product details.
 * The PDF document is saved as "output.pdf" in the current directory.
 */

function pdfKit() {
  const PDFDocument = require("pdfkit");
  const fs = require("fs");

  // Create a new PDF document
  const doc = new PDFDocument();

  // Pipe the PDF into a file
  doc.pipe(fs.createWriteStream("output.pdf"));

  // Draw the barcode image
  // You need to have the barcode image available on disk or generated by a module
  // doc.image("44019.jpg", 50, 20, { width: 200 });

  // Function to split long text into lines
  function splitTextToLines(doc, text, maxWidth) {
    const words = text.split(" ");
    const lines = [];
    let currentLine = words[0];

    for (let i = 1; i < words.length; i++) {
      const word = words[i];
      const width = doc.widthOfString(currentLine + " " + word);
      if (width < maxWidth) {
        currentLine += " " + word;
      } else {
        lines.push(currentLine);
        currentLine = word;
      }
    }
    lines.push(currentLine); // Push the last line

    return lines;
  }

  // Create a document

  // Example addresses
  const senderAddress = "Sender Name, Some Very Long Address Line that might not fit on one line, City, State, Zip";
  const receiverAddress = "Receiver Name, Another Long Address Line with additional details, City, State, Zip";

  // Maximum width for addresses
  const maxWidth = 300;

  // Split addresses into lines if they are too long
  const senderLines = splitTextToLines(doc, senderAddress, maxWidth);
  const receiverLines = splitTextToLines(doc, receiverAddress, maxWidth);

  // Starting positions
  let ySender = 50;
  let yReceiver = 50;

  // Draw sender address
  doc.fontSize(10).text("From:", 50, ySender, { continued: true }).text(" ", 70, ySender);
  senderLines.forEach((line) => {
    doc.text(line, 80, ySender, { width: maxWidth, align: "left" });
    ySender += 15; // Adjust line spacing
  });

  // Adjust receiver start position based on sender address height
  yReceiver = ySender + 20; // Add some padding between addresses

  // Draw receiver address
  doc.fontSize(10).text("To:", 50, yReceiver, { continued: true }).text(" ", 70, yReceiver);
  receiverLines.forEach((line) => {
    doc.text(line, 70, yReceiver, { width: maxWidth, align: "left" });
    yReceiver += 15; // Adjust line spacing
  });

  // Finalize the PDF file
  doc.end();

  // Finalize the PDF and end the document
}
// pdfKit();

function generateShippingLabelA6() {
  const PDFDocument = require("pdfkit");
  const fs = require("fs");
  // A6 dimensions in points are set automatically by pdfkit
  const doc = new PDFDocument({
    size: "A6",
    margin: 20, // Smaller margins for smaller paper size
  });

  doc.pipe(fs.createWriteStream("output.pdf"));

  // Define the positions and styles for each element
  // This is a simple version, you should add more elements as per your design

  // Sender's address
  doc
    .fontSize(10)
    .text("From:", 20, 20)
    .font("Helvetica")
    .fontSize(8)
    .text("Sender Name\nSender Address Line 1\nSender City, State, Zip", {
      width: doc.page.width - 40, // Adjust width based on page width and margins
      align: "left",
    });

  doc.image("barcode.jpg", 200, 0, { fit: [100, 100] });
  // Receiver's address
  doc
    .moveDown()
    .fontSize(10)
    .text("To:", 20, doc.y)
    .font("Helvetica")
    .fontSize(8)
    .text("Receiver Name\nReceiver Address Line 1\nReceiver City, State, Zip", {
      width: doc.page.width - 40, // Adjust width based on page width and margins
      align: "left",
    });

  doc
    .moveTo(0, 150) // Set the start point
    .lineTo(300, 150) // Line to end point
    .stroke();
  // Placeholder for barcode - Replace with actual barcode image
  doc
    .moveDown()
    .fontSize(10)
    .text("Tracking Number:", 20, doc.y)
    .font("Helvetica")
    .fontSize(8)
    .text("123456789", {
      width: doc.page.width - 40, // Adjust width based on page width and margins
      align: "left",
    });

  // Table headers
  const headers = ["Product", "Qty", "Price"];
  const columnWidths = [100, 30, 40]; // Adjust the widths to fit A6 page size
  const tableTop = 200;

  // Draw headers
  let currentX = doc.page.margins.left;
  headers.forEach((header, i) => {
    doc.fontSize(8).text(header, currentX, tableTop, { width: columnWidths[i], align: "center" });
    currentX += columnWidths[i];
  });

  // Draw rows of sample data
  const tableRows = [
    ["Widget", "2", "$19.99"],
    ["Gadget", "5", "$49.99"],
    ["Doohickey", "3", "$29.99"],
  ];

  let currentY = tableTop + 15; // Start below the headers
  tableRows.forEach((row) => {
    currentX = doc.page.margins.left; // Reset to first column
    row.forEach((text, i) => {
      doc.fontSize(8).text(text, currentX, currentY, { width: columnWidths[i], align: "center" });
      currentX += columnWidths[i];
    });
    currentY += 15; // Move to next row
  });

  // Draw lines for the table
  doc.strokeColor("#000");
  // Horizontal lines
  currentY = tableTop; // Reset to top of the table
  for (let i = 0; i <= tableRows.length; i++) {
    doc
      .moveTo(doc.page.margins.left, currentY)
      .lineTo(doc.page.width - doc.page.margins.right, currentY)
      .stroke();
    currentY += 15; // Increment y position for the next line
  }

  // Vertical lines
  currentX = doc.page.margins.left; // Reset to first column
  columnWidths.forEach((width, i) => {
    currentX += width;
    doc
      .moveTo(currentX, tableTop)
      .lineTo(currentX, tableTop + (tableRows.length + 1) * 15) // +1 for header
      .stroke();
  });
  // Finalize the PDF file
  doc.end();
}

generateShippingLabelA6();
